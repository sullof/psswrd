const crypto = require('crypto')
const path = require('path')
const pkg = require('../package')

const fs = require('./utils/fs')
const Crypto = require('./utils/Crypto')

const HEX_REGEX = /^[0-9a-f]$/
const BASE64_REGEX = /^[A-Za-z0-9+/]+={0,2}$/
const PSSWRD_PATH = path.join(process.env.HOME, '.psswrd')
const DEFAULT_STORE = 'default_store'

class Psswrd {

  constructor() {
    this.db = null
    this.masterPassword = null
    this.rootdir = process.env.NODE_ENV === 'test'
        ? path.resolve(__dirname, '../tmp/')
        : PSSWRD_PATH
  }

  __setRootdirForTest() {
    this.rootdir = path.resolve(__dirname, '../tmp/')
  }

  init(name) {
    // creates the store for name
    return Promise.resolve()
        .then(() => {

          if (fs.existsSync(this.rootdir)) {
            return Promise.resolve()
          } else {
            // generate a new store
            return fs.ensureDirAsync(this.rootdir)
                .then(() => {
                  return fs.writeFileAsync(path.join(this.rootdir, 'README'), `
This folder has been generated by psswrd v${pkg.version}.
It contains your secret's database. 
Be careful and don't touch anything!
`, 'utf-8')
                })
          }
        })
        .then(() => {
          name = Crypto.toBase64(name || DEFAULT_STORE)
          this.db = require('then-levelup')(require('level')(path.join(this.rootdir, name)))
        })
  }

  gitInit(remoteRepo) {
    // associate the store to a remote repo
    return Promise.resolve()
        .then(() => {

          if (fs.existsSync(path.join(this.rootdir, '.git'))) {
            // repo exists
            throw new Error('Repo already exists.')
          } else {
            // associate the remoteRepo

          }
        })
  }

  login(password) {
    return Promise.resolve()
        .then(() => {
          const masterPassword = this.fromAES(this.getMasterPassword(), password)
          if (typeof masterPassword === 'string' && HEX_REGEX.test(masterPassword)) {
            this.masterPassword = masterPassword
          } else {
            throw new Error('Wrong password.')
          }
        })
  }

}

module.exports = new Psswrd