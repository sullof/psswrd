const path = require('path')
const pkg = require('../package')
const fs = require('./utils/fs')
const Crypto = require('./utils/Crypto')
const errors = require('./errors')

const HEX_REGEX = /^[0-9a-f]$/
const BASE64_REGEX = /^[A-Za-z0-9+/]+={0,2}$/
const PSSWRD_PATH = path.join(process.env.HOME, '.psswrd')
const DEFAULT_STORE = 'default_store'

class Psswrd {

  constructor() {
    this.masterPassword = null
    this.rootdir = process.env.NODE_ENV === 'test'
        ? path.resolve(__dirname, '../tmp/.psswrd')
        : PSSWRD_PATH
    this.db = null
    this.dbName = null
  }

  setDb(name) {
    const db_dir = path.join(this.rootdir, name)
    this.db = require('then-levelup')(require('level')(db_dir))
    this.dbName = name
    return Promise.resolve()
  }

  init(name) {
    name = (name || DEFAULT_STORE).toLowerCase()
    return Promise.resolve()
        .then(() => {

          if (fs.existsSync(this.rootdir)) {
            return Promise.resolve()
          } else {
            // generate a new store
            return fs.ensureDirAsync(this.rootdir)
                .then(() => {
                  return fs.writeFileAsync(path.join(this.rootdir, 'README'), `
This folder has been generated by psswrd v${pkg.version}.
It contains your secret's database. 
Be careful and don't touch anything!
`, 'utf-8')
                })
          }
        })
        .then(() => Crypto.toBase64(name))
        .then(name => this.setDb(name))
        .then(() => {
          if (fs.existsSync(path.join(this.rootdir,'.master'))) {

          }
        })
  }

  use(name = DEFAULT_STORE) {
    return Crypto.toBase64(name.toLowerCase())
        .then(name => {
          if (this.dbName === name) {
            return Promise.resolve()
          }
          if (fs.existsSync(path.join(this.rootdir, name))) {
            return this.setDb(name)
          } else {
            throw new Error(errors.DbNotFound)
          }
        })
  }

  isInitialized() {
    return this.dbName !== null
  }

  gitInit(remoteRepo) {
    // TODO
    // associate the store to a remote repo
    return Promise.resolve()
        .then(() => {

          if (fs.existsSync(path.join(this.rootdir, '.git'))) {
            // repo exists
            throw new Error(errors.RepoExists)
          } else {
            // associate the remoteRepo

            return Promise.resolve()
          }
        })
  }

  getMasterPassword() {

  }

  login(password) {
    return Promise.resolve()
        .then(() => {
          const masterPassword = this.fromAES(this.getMasterPassword(), password)
          if (typeof masterPassword === 'string' && HEX_REGEX.test(masterPassword)) {
            this.masterPassword = masterPassword
          } else {
            throw new Error('Wrong password.')
          }
        })
  }

  signup(password) {
    return Promise.resolve()
        .then(() => {
          const masterPassword = this.fromAES(this.getMasterPassword(), password)
          if (typeof masterPassword === 'string' && HEX_REGEX.test(masterPassword)) {
            this.masterPassword = masterPassword
          } else {
            throw new Error('Wrong password.')
          }
        })
  }

}

module.exports = new Psswrd